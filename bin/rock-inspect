#! /usr/bin/env ruby

require 'optparse'
require File.join(File.dirname(__FILE__),'..','lib','rock','rock_inspect.rb')

search_for = []
@search_filter = Hash.new

def disable_all
    @search_filter[:no_ports] = true
    @search_filter[:no_tasks] = true
    @search_filter[:no_deployments] = true
    @search_filter[:no_types] = true
    @search_filter[:no_widgets] = true
    @search_filter[:no_plugins] = true
end

parser = OptionParser.new do |opt|
    opt.banner = <<-EOT

usage: rock-inspect <search term>

 Searches for <search term> in installed oroGen projects,
 vizkit widgets and plugins and displays the definition of 
 the matching objects.

Examples:
 rock-inspect camera --show_deplyoments
 rock-inspect -t camera -T FramePair --show_tasks

    EOT

    opt.on('--help') do
        puts self
        exit 0
    end
    opt.on('-t', '--tasks TASK', 'if given, will filter out all items which are not related to TASK.') do |task|
        @search_filter[:tasks] = /#{task}/
    end
    opt.on('-T', '--types TYPES', 'if given, will filter out all items which are not related to TYPES.') do |type|
        @search_filter[:types] = /#{type}/
    end
    opt.on('-d', '--deployments DEPLOYMENTS', 'if given, will filter out all items which are not related to DEPLOYMENTS.') do |deployment|
        @search_filter[:deployments] = /#{deployment}/
    end
    opt.on('-P', '--ports PORTS', 'if given, will filter out all items which are not related to PORTS.') do |port|
        @search_filter[:ports] = /#{port}/
    end

    opt.on('-p', '--plugins PLUGINS', 'not implemented.') do |plugin|
        @search_filter[:plugins] = /#{plugin}/
    end
    opt.on('-w', '--widgets WIDGETS', 'if given, will filter out all item which are not related to WIDGTES') do |widget|
        @search_filter[:widgets] = /#{widget}/
    end

    opt.on('--show_types','if given, will only display types. Can be combined with other show options.') do
        disable_all unless @search_filter.has_key? :no_types
        @search_filter.delete :no_types
    end
    opt.on('--show_ports','if given, will only display ports. Can be combined with other show options.') do
        disable_all unless @search_filter.has_key? :no_ports
        @search_filter.delete :no_ports
    end
    opt.on('--show_tasks','if given, will only display tasks. Can be combined with other show options.') do
        disable_all unless @search_filter.has_key? :no_tasks
        @search_filter.delete :no_tasks
    end
    opt.on('--show_deployments','if given, will only display deployments. Can be combined with other show options.') do
        disable_all unless @search_filter.has_key? :no_deployments
        @search_filter.delete :no_deployments
    end
    opt.on('--show_widgets','if given, will only display widgtes. Can be combined with other show options.') do
        disable_all unless @search_filter.has_key? :no_widgets
        @search_filter.delete :no_widgets
    end
    opt.on('--debug') do
        debug = true
    end
end

remaining = parser.parse(ARGV)
if remaining.empty? && @search_filter.empty? 
    puts parser
    exit(1)
end

result = Rock::Inspect.find(remaining,@search_filter)
views = result.map do |item|
    if(item.object.is_a?(Orocos::Spec::TaskContext))
        Rock::TaskView.new(item)
    elsif(item.object.is_a?(Orocos::Spec::Port))
        Rock::PortView.new(item) 
    elsif(item.object.is_a?(Orocos::Generation::Deployment))
        Rock::DeploymentView.new(item) 
    elsif(item.object.is_a?(Qt::Widget))
        Rock::WidgetView.new(item) 
    elsif(item.object.class.is_a?(Class) && item.object.respond_to?(:<=) && item.object <= Typelib::Type)
        Rock::TypeView.new(item) 
    end
end

result = views.compact.uniq.sort_by{|t|t.name}.each{|t|pp t}
if result.empty?
    puts "nothing was found for pattern = #{remaining}" 
    puts " filter deployments = #{@search_filter[:deployments]}" if @search_filter.has_key?(:deployments)
    puts " filter tasks = #{@search_filter[:tasks]}" if @search_filter.has_key?(:tasks)
    puts " filter ports = #{@search_filter[:ports]}" if @search_filter.has_key?(:ports)
    puts " filter types = #{@search_filter[:types]}" if @search_filter.has_key?(:types)
    puts " filter widgets = #{@search_filter[:widgets]}" if @search_filter.has_key?(:widgets)
end
