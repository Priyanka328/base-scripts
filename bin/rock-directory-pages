#! /usr/bin/env ruby

base_dir = File.expand_path('../lib', File.dirname(__FILE__))
$LOAD_PATH.unshift base_dir

require 'autoproj'
require 'autoproj/cmdline'
require 'rock/autoproj_webgen'
require 'rock/orogen_webgen'

Autoproj::CmdLine.initialize_and_load
manifest = Autoproj.manifest

output_dir = ARGV.shift
if !output_dir
    exit(1)
end

api_dir = ARGV.shift

root_metainfo = []
sort_order = 0

render = Rock::Doc::Render.new(output_dir)

all_packages = Hash.new
manifest.each_package_set.to_a.sort_by(&:name).each do |pkg_set|
    next if pkg_set.local?
    if metainfo = render.package_set(pkg_set, (sort_order += 1))
        root_metainfo << metainfo
    end

    pkg_set.each_package.each do |pkg|
        all_packages[pkg.name] = [pkg, pkg_set.name]
    end
end

all_packages.to_a.sort_by(&:first).map(&:last).each do |pkg, pkg_set|
    next if !File.directory?(pkg.srcdir)

    if File.exists?(File.join(pkg.srcdir, "manifest.xml"))
        manifest.load_package_manifest(pkg.name)
        manifest.resolve_optional_dependencies
    end

    if pkg.kind_of?(Autobuild::Orogen)
        orogen_file = File.join(pkg.srcdir, pkg.orogen_file)
        name = File.readlines(orogen_file).grep(/^name\s/).to_a.first
        if name
            name =~ /^name[^\w]+(\w+)/
            name = $1
            Rock::Doc.orogen_to_autoproj[name] = pkg.name
        else
            STDERR.puts "WARN: cannot extract the oroGen project name from #{orogen_file} (package: #{pkg.name})"
        end
    end

    if api_dir && File.directory?(File.join(api_dir, pkg.name))
        pkg_api = "../../../api/#{pkg.name}/index.html"
    end

    if metainfo = render.package(pkg, pkg_set, pkg_api, (sort_order += 1))
        root_metainfo << metainfo
    end
end

Autoproj.osdeps.all_definitions.sort_by(&:first).each do |name, data|
    if metainfo = render.osdeps(name, data, (sort_order += 1))
        root_metainfo << metainfo
    end
end

Rock::Doc::OrogenRender.render_all(output_dir, true)

metainfo = root_metainfo.map do |dir, title, sort|
        ["#{dir}:",
         "  title: #{title}",
         "  routed_title: #{title}",
         "  sort_info: #{sort}",
         ""].join("\n")
    end.join("\n")

Rock::Doc.render_page(File.join(output_dir, 'htmldoc.metainfo'), metainfo)

