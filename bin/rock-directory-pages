#! /usr/bin/env ruby

base_dir = File.expand_path('../lib', File.dirname(__FILE__))
$LOAD_PATH.unshift base_dir

PAGES_DIR = File.join(base_dir, 'rock', 'pages', 'package_directory')

require 'autoproj'
require 'autoproj/cmdline'
require 'rock/autoproj_webgen'
require 'rock/orogen_webgen'

output_dir = ARGV.shift
if !output_dir
    STDERR.puts "usage: rock-directory-pages output_dir"
    exit(1)
end

Autoproj::CmdLine.initialize_and_load
manifest = Autoproj.manifest

api_dir = ARGV.shift

root_metainfo = []
sort_order = 0

render = Rock::Doc::Render.new(output_dir)

module Rock
    module Doc
        class Package
            # The Autobuild::Package instance that describes this package
            attr_reader :pkg

            # The PackageSet instance which defines this package
            attr_reader :pkg_set

            # If true, this package has some HTML documentation generated in
            # API_ROOT/package_name/index.html
            attr_predicate :has_api?

            # If this package is an orogen package, this is the name of the orogen
            # project
            attr_reader :orogen_name

            def name
                pkg.name
            end

            def initialize(pkg, pkg_set, has_api, orogen_name)
                @pkg, @pkg_set, @has_api, @orogen_name =
                    pkg, pkg_set, has_api, orogen_name
            end

            def manifest
                Autoproj.manifest.package_manifests[pkg.name]
            end

            def documentation
                if m = manifest
                    doc = m.documentation
                else
                    doc = "#{name} has no manifest"
                end

                if !doc || doc.empty?
                    doc = "#{name} has no documentation in its manifest"
                end
                doc
            end

            def short_documentation
                if m = manifest
                    doc = m.short_documentation
                else
                    doc = "#{name} has no manifest"
                end

                if !doc || doc.empty?
                    doc = "#{name} has no documentation in its manifest"
                end
                doc
            end
        end
    end
end

all_packages = Hash.new

all_package_sets = manifest.each_package_set.find_all { |pkg_set| !pkg_set.local? }
Rock::Doc.render_page(File.join(output_dir, 'package_sets', 'index.page'),
                      Rock::Doc.render_package_set_list(all_package_sets, 1))
all_package_sets.sort_by(&:name).each do |pkg_set|
    if metainfo = render.package_set(pkg_set, (sort_order += 1))
        root_metainfo << metainfo
    end

    pkg_set.each_package.each do |pkg|
        all_packages[pkg.name] = [pkg, pkg_set.name]
    end
end

all_packages = all_packages.each_value.map do |pkg, pkg_set|
    if !File.directory?(pkg.srcdir)
        Autoproj.warn "#{pkg.srcdir} does not exist, skipping #{pkg.name}"
        next
    end

    if File.exists?(File.join(pkg.srcdir, "manifest.xml"))
        manifest.load_package_manifest(pkg.name)
        manifest.resolve_optional_dependencies
    end

    if pkg.kind_of?(Autobuild::Orogen)
        orogen_file = File.join(pkg.srcdir, pkg.orogen_file)
        orogen_name = File.readlines(orogen_file).grep(/^name\s/).to_a.first
        if orogen_name
            orogen_name =~ /^name[^\w]+(\w+)/
            orogen_name = $1
            Rock::Doc.orogen_to_autoproj[orogen_name] = pkg.name
        else
            STDERR.puts "WARN: cannot extract the oroGen project name from #{orogen_file} (package: #{pkg.name})"
        end
    end

    if api_dir && File.directory?(File.join(api_dir, pkg.name))
        has_api = true
    end

    Rock::Doc::Package.new(pkg, pkg_set, has_api, orogen_name)
end.compact

Rock::Doc.api_dir = api_dir
Rock::Doc.link_api_dir = "/api/"
Rock::Doc.autoproj_packages = all_packages

Rock::Doc.render_page(File.join(output_dir, 'packages', 'index.page'),
                      Rock::Doc.render_package_list(all_packages, 1, sort_order))
sorted = Hash.new { |h, k| h[k] = Array.new }
all_packages.each do |pkg|
    elements = Pathname(pkg.name).enum_for(:each_filename).to_a
    if elements.size > 1
        sorted[elements.first] << pkg
    end
end
sorted.keys.sort.each do |dirname|
    if dirname != '.'
        Rock::Doc.render_page(File.join(output_dir, 'packages', dirname, 'index.page'),
                              Rock::Doc.render_package_list(sorted[dirname], 2))
    end
    root_metainfo << ["packages/#{dirname}", "#{dirname}/", sort_order += 1]
end
all_packages.sort_by(&:name).each do |pkg|
    if metainfo = render.package(pkg, (sort_order += 1))
        root_metainfo << metainfo
    end
end

Rock::Doc.render_page(File.join(output_dir, 'index.page'), File.join(PAGES_DIR, 'index.page'))

Rock::Doc.render_page(File.join(output_dir, 'osdeps', 'index.page'),
                      Rock::Doc.render_osdeps_list(Autoproj.osdeps.all_definitions, 1))
Autoproj.osdeps.all_definitions.sort_by(&:first).each do |name, data|
    if metainfo = render.osdeps(name, data, (sort_order += 1))
        root_metainfo << metainfo
    end
end

Rock::Doc::OrogenRender.render_all(output_dir, true)

root_metainfo << ["package_sets", "Package Sets", 1]
root_metainfo << ["packages", "Packages", 2]
root_metainfo << ["orogen_tasks", "oroGen Tasks", 3]
root_metainfo << ["orogen_types", "oroGen Types", 4]
root_metainfo << ["osdeps",   "OS Dependencies", 5]
metainfo = root_metainfo.map do |dir, title, sort|
        ["#{dir}:",
         "  title: #{title}",
         "  routed_title: #{title}",
         "  sort_info: #{sort}",
         ""].join("\n")
    end.join("\n")

Rock::Doc.render_page(File.join(output_dir, 'htmldoc.metainfo'), metainfo)

