#!/usr/bin/env ruby

require 'optparse'
require 'orocos'

options = Hash[buffersize: 1000, pull: false]
optparse = OptionParser.new do |opts|
    opts.banner = "usage: rock-hz -t <task-name> -p <port-name>"

    opts.on('--host=HOST', String) do |host|
        Orocos::CORBA.name_service.ip = host
    end

    opts.on("-t","--task TASK","task name") do |t|
        options[:task_name] = t
    end

    opts.on("-p","--port PORT","port name") do |p|
        options[:port_name] = p
    end

    opts.on("-b","--buffersize BUFFERSIZE","buffersize") do |size|
        options[:buffersize] = size.to_i
    end
    opts.on '--pull', 'use a pull connection' do
        options[:pull] = true
    end

    opts.on_tail("-h","--help", "Show this message") do
        puts opts
        exit
    end
end
optparse.parse!

if !(options[:task_name] || options[:port_name])
    puts optparse
    exit
end

Orocos.initialize

task = Orocos.get options[:task_name]
port = task.port options[:port_name]
port_reader = port.reader type: :buffer, size: options[:buffersize],
    pull: options[:pull]

min_reporting_period = 1
def compute_frequency(now, queue, window_duration)
    return 0 if queue.empty?

    deadline = now - window_duration
    while !queue.empty? && (queue.last < deadline)
        queue.pop
    end
    if !queue.empty?
        Float(queue.size) / (now - queue.last)
    else
        0
    end
end

begin
    one_s_queue = []
    one_s_filled = false
    ten_s_queue = []
    ten_s_filled = false

    while true
        start_time  = Time.now
        has_new_samples = false
        while port_reader.read_new && (Time.now - start_time) < min_reporting_period
            has_new_samples = true
            one_s_queue.unshift Time.now
            ten_s_queue.unshift Time.now
        end

        now = Time.now
        one_s = compute_frequency(now, one_s_queue, 1)
        ten_s = compute_frequency(now, ten_s_queue, 10)

        # Terminal code to go up 1 line and clear the line
        puts "message frequency (past 1 second): #{one_s}"
        puts "message frequency (past 10 second): #{ten_s}"
        if !has_new_samples
            sleep 0.1
        end
    end
rescue SystemExit, Interrupt
end
