#! /usr/bin/env ruby

BASE_DIR = File.expand_path('..', File.dirname(__FILE__))

def package_status(pkg)
    pkg_name =
        if pkg.respond_to?(:text_name)
            pkg.text_name
        else pkg.autoproj_name
        end

    result = [pkg_name, [], []]

    if !File.directory?(pkg.srcdir)
        Autoproj.warn "#{pkg.name} not checked out (expected to be in #{pkg.srcdir})"
        raise ArgumentError, "#{pkg_name} is not checked out yet"
    elsif !pkg.importer
        raise ArgumentError, "configuration error: #{pkg_name} has no VCS"
    elsif !pkg.importer.respond_to?(:status)
        raise ArgumentError, "the #{pkg.importer.class.name.gsub(/.*::/, '')} importer does not support status display"
    else
        status = pkg.importer.status(pkg)
        if status.uncommitted_code
            Autoproj.warn "the #{pkg_name} package contains uncommitted modifications"
        end

        case status.status
        when Autobuild::Importer::Status::UP_TO_DATE
            result[0] = "#{pkg_name}: in sync"
        else
            result[1] = status.local_commits
            result[2] = status.remote_commits
        end
    end

    result
end
require 'autoproj'
require 'erb'

dest_path = nil
parser = OptionParser.new do |opt|
    opt.banner = "rock-status from_flavor to_flavor dest_path"
end
remaining = parser.parse(ARGV)

from_flavor = ARGV.shift
to_flavor   = ARGV.shift
dest_path   = ARGV.shift

if !from_flavor || !to_flavor
    puts parser
    exit 1
elsif !dest_path
    puts parser
    exit 1
end

io = File.open(dest_path, 'w')

ENV['ROCK_FORCE_FLAVOR'] = from_flavor
Autoproj::CmdLine.initialize_and_load(["--update"])
manifest = Autoproj.manifest
source_packages = manifest.each_package.to_a
source_package_names = source_packages.map(&:name)

ENV['ROCK_FORCE_FLAVOR'] = to_flavor
Autoproj::CmdLine.parse_arguments(['--update'], false)
Autoproj::CmdLine.update_os_dependencies = false
Autoproj::CmdLine.initialize
Autoproj::CmdLine.update_configuration
Autoproj::CmdLine.load_configuration
Autoproj::CmdLine.setup_all_package_directories
manifest = Autoproj.manifest
target_packages = manifest.each_package.to_a
target_package_names = target_packages.map(&:name)

new_packages = (source_package_names - target_package_names)
obsolete_packages = (target_package_names - source_package_names)
in_from, in_to = 0, 0
errors, needs_push, needs_merge = [], [], []

status = target_packages.sort_by { |pkg| pkg.name }.map do |pkg|
    next if !source_package_names.include?(pkg.name)
    begin
        main, from_commits, to_commits = package_status(pkg)
    rescue Exception => status_error
        errors << pkg
        next([pkg, status_error])
    end

    if main
        in_from += from_commits.size
        if !from_commits.empty?
            needs_push << pkg
        end
        in_to += to_commits.size
        if !to_commits.empty?
            needs_merge << pkg
        end
    end
    [pkg, main, from_commits, to_commits]
end

id = 0
template = File.join(BASE_DIR, 'lib', 'rock', 'rock-status.page.template')
erb = ERB.new(File.read(template))
io.puts erb.result(binding)

