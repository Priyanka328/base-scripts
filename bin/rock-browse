#! /usr/bin/env ruby
require 'Qt'

require 'rock/doc'
require 'qtwebkit'
require 'autoproj'
require 'orocos'
Orocos.load
Autoproj::CmdLine.initialize_and_load
app = Qt::Application.new(ARGV)

main = Qt::Widget.new
main_layout = Qt::VBoxLayout.new(main)
menu_layout = Qt::HBoxLayout.new
reload = Qt::PushButton.new("Reload", main)
menu_layout.add_widget(reload)
menu_layout.add_stretch(1)

splitter = Qt::Splitter.new
main_layout.add_layout(menu_layout)
main_layout.add_widget(splitter)

class ModelListWidget < Qt::TreeWidget
    attr_reader :roots
    attr_reader :dummy_models

    ROLE_OROGEN_TYPE = 0
    ROLE_OROGEN_TASK = 1
    ROLE_INSTALLED_PACKAGE = 2
    ROLE_AVAILABLE_PACKAGE = 3
    ROLE_END = 4

    ROLE_NAMES = [
        "oroGen Types",
        "oroGen Tasks",
        "Installed Packages",
        "Available Packages"
    ]

    def initialize(parent = nil)
        super

        @dummy_models = Array.new

        @roots = Array.new
        ROLE_END.times do |i|
            roots[i] = Qt::TreeWidgetItem.new(self)
            roots[i].set_text(0, ROLE_NAMES[i])
        end
        set_header_label("")
    end

    def clear
        roots.each(&:take_children)
    end

    def reload
        Orocos.load
        dummy_models.each do |file_or_dir|
            Orocos.load_dummy_models(file_or_dir)
        end
        populate
    end

    def populate
        if current = current_item
            current_type = current.data(0, Qt::UserRole)
            if current_type.null?
                current = nil
            else
                current_type = current_type.to_int
                current = current.text(0)
            end
        end
        clear
        
        Orocos.available_types.keys.sort.each do |name|
            item = Qt::TreeWidgetItem.new(roots[ROLE_OROGEN_TYPE])
            item.set_text(0, name)
            item.set_data(0, Qt::UserRole, Qt::Variant.new(ROLE_OROGEN_TYPE))
        end

        Orocos.available_task_models.keys.sort.each do |name|
            item = Qt::TreeWidgetItem.new(roots[ROLE_OROGEN_TASK])
            item.set_text(0, name)
            item.set_data(0, Qt::UserRole, Qt::Variant.new(ROLE_OROGEN_TASK))
        end

        Autoproj.manifest.packages.values.sort_by(&:name).each do |pkg|
            role = if File.directory?(pkg.autobuild.srcdir)
                       ROLE_INSTALLED_PACKAGE
                   else
                       ROLE_AVAILABLE_PACKAGE
                   end

            item = Qt::TreeWidgetItem.new(roots[role])
            item.set_text(0, pkg.name)
            item.set_data(0, Qt::UserRole, Qt::Variant.new(role))
        end

        if current
            root = roots[current_type]
            matches = findItems(current, Qt::MatchExactly, 0)
            if !matches.empty?
                self.current_item = matches.first
            end
        end
    end
end

view = ModelListWidget.new(splitter)
text = Qt::WebView.new(splitter)
splitter.add_widget(view)
splitter.add_widget(text)

reload.connect(SIGNAL('clicked()')) do
    view.reload
end

view.connect(SIGNAL('itemClicked(QTreeWidgetItem*,int)')) do |item, col|
    if item
        role = item.data(0, Qt::UserRole)
        role = if !role.null?
                   role.to_int
               end
        name = item.text(0)

        if role == ModelListWidget::ROLE_OROGEN_TYPE
            Orocos.load_typekit_for(name, false)
            fragment = Rock::Doc::HTML.render_object(Orocos.registry.get(name), 'type_fragment.page')
        elsif role == ModelListWidget::ROLE_OROGEN_TASK
            model = Orocos.task_model_from_name(name)
            fragment = Rock::Doc::HTML.render_object(model, 'orogen_task_fragment.page')
        elsif role == ModelListWidget::ROLE_INSTALLED_PACKAGE || role == ModelListWidget::ROLE_AVAILABLE_PACKAGE
            package = Autoproj.manifest.packages[name]
            fragment = Rock::Doc::HTML.render_object(package, 'autoproj_package_fragment.page')
        end
        if fragment
            text.html = Rock::Doc::HTML.render_page(fragment)
        end
    end
end

bundle_path = File.join("models", "orogen")
if File.directory?(bundle_path)
    view.dummy_models << bundle_path
end
view.reload
main.show

app.exec
