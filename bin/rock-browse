#! /usr/bin/env ruby
require 'Qt'

require 'metaruby/gui'
require 'orogen/html'
require 'rock/html'

require 'qtwebkit'
require 'autoproj'
require 'orocos'

Orocos.load
Autoproj.silent do
    Autoproj::CmdLine.initialize_and_load
end

app = Qt::Application.new(ARGV)

main = Qt::Widget.new
main_layout = Qt::VBoxLayout.new(main)
menu_layout = Qt::HBoxLayout.new
reload = Qt::PushButton.new("Reload", main)
menu_layout.add_widget(reload)
menu_layout.add_stretch(1)

splitter = Qt::Splitter.new
main_layout.add_layout(menu_layout)
main_layout.add_widget(splitter)

class ModelListWidget < Qt::TreeWidget
    attr_reader :roots
    attr_reader :dummy_models

    ROLE_OROGEN_TYPE = 0
    ROLE_OROGEN_TASK = 1
    ROLE_INSTALLED_PACKAGE = 2
    ROLE_AVAILABLE_PACKAGE = 3
    ROLE_PACKAGE_SET = 4
    ROLE_OSDEPS = 5

    ROLE_NAMES = [
        "oroGen Types",
        "oroGen Tasks",
        "Installed Packages",
        "Available Packages",
        "Package Sets",
        'OS Packages'
    ]

    def initialize(parent = nil)
        super

        @dummy_models = Array.new

        @roots = Array.new
        ROLE_NAMES.each_with_index do |name, i|
            roots[i] = Qt::TreeWidgetItem.new(self)
            roots[i].set_text(0, name)
        end
        set_header_label("")
    end

    def clear
        roots.each(&:take_children)
    end

    def reload
        Orocos.load
        dummy_models.each do |file_or_dir|
            Orocos.load_dummy_models(file_or_dir)
        end
        populate
    end

    def populate
        if current = current_item
            current_type = current.data(0, Qt::UserRole)
            if current_type.null?
                current = nil
            else
                current_type = current_type.to_int
                current = current.text(0)
            end
        end
        clear
        
        Orocos.available_types.keys.sort.each do |name|
            item = Qt::TreeWidgetItem.new(roots[ROLE_OROGEN_TYPE])
            item.set_text(0, name)
            item.set_data(0, Qt::UserRole, Qt::Variant.new(ROLE_OROGEN_TYPE))
        end

        Orocos.available_task_models.keys.sort.each do |name|
            item = Qt::TreeWidgetItem.new(roots[ROLE_OROGEN_TASK])
            item.set_text(0, name)
            item.set_data(0, Qt::UserRole, Qt::Variant.new(ROLE_OROGEN_TASK))
        end

        Autoproj.manifest.packages.values.sort_by(&:name).each do |pkg|
            role = if File.directory?(pkg.autobuild.srcdir)
                       ROLE_INSTALLED_PACKAGE
                   else
                       ROLE_AVAILABLE_PACKAGE
                   end

            item = Qt::TreeWidgetItem.new(roots[role])
            item.set_text(0, pkg.name)
            item.set_data(0, Qt::UserRole, Qt::Variant.new(role))
        end

        Autoproj.manifest.each_package_set.sort_by(&:name).each do |pkg_set|
            item = Qt::TreeWidgetItem.new(roots[ROLE_PACKAGE_SET])
            item.set_text(0, pkg_set.name)
            item.set_data(0, Qt::UserRole, Qt::Variant.new(ROLE_PACKAGE_SET))
        end

        Autoproj.osdeps.all_definitions.keys.sort.each do |osdep_name|
            item = Qt::TreeWidgetItem.new(roots[ROLE_OSDEPS])
            item.set_text(0, osdep_name)
            item.set_data(0, Qt::UserRole, Qt::Variant.new(ROLE_OSDEPS))
        end

        if current
            root = roots[current_type]
            matches = findItems(current, Qt::MatchExactly, 0)
            if !matches.empty?
                self.current_item = matches.first
            end
        end
    end
end

view = ModelListWidget.new(splitter)
text = Qt::WebView.new(splitter)
page = MetaRuby::GUI::HTML::Page.new(text.page)
splitter.add_widget(view)
splitter.add_widget(text)

displays = [
    Orocos::HTML::TaskContext.new(page),
    Orocos::HTML::Type.new(page),
    Rock::HTML::AutoprojPackage.new(page),
    Rock::HTML::AutoprojPackageSet.new(page),
    Rock::HTML::AutoprojOSDep.new(page),
]

reload.connect(SIGNAL('clicked()')) do
    view.reload
end

view.connect(SIGNAL('itemClicked(QTreeWidgetItem*,int)')) do |item, col|
    if item
        role = item.data(0, Qt::UserRole)
        role = if !role.null?
                   role.to_int
               end
        name = item.text(0)

        page.clear
        if role == ModelListWidget::ROLE_OROGEN_TYPE
            Orocos.load_typekit_for(name, false)
            displays[1].render(Orocos.registry.get(name))
        elsif role == ModelListWidget::ROLE_OROGEN_TASK
            model = Orocos.task_model_from_name(name)
            displays[0].render(model)
        elsif role == ModelListWidget::ROLE_INSTALLED_PACKAGE || role == ModelListWidget::ROLE_AVAILABLE_PACKAGE
            package = Autoproj.manifest.packages[name]
            displays[2].render(package)
        elsif role == ModelListWidget::ROLE_PACKAGE_SET
            package = Autoproj.manifest.each_package_set.find { |pkg_set| pkg_set.name == name }
            displays[3].render(package)
        elsif role == ModelListWidget::ROLE_OSDEPS
            osdep = Rock::HTML::OSPackage.new(name)
            displays[4].render(osdep)
        end
    end
end

bundle_path = File.join("models", "orogen")
if File.directory?(bundle_path)
    view.dummy_models << bundle_path
end
view.reload
main.show

app.exec
